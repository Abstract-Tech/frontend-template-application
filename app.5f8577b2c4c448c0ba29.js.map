{"version":3,"sources":["webpack:///./src/data/constants/actionTypes/posts.js","webpack:///./src/data/constants/actionTypes/comment.js","webpack:///./src/index.jsx","webpack:///./src/containers/PostsPage/index.jsx","webpack:///./src/components/ToggleablePosts/index.jsx","webpack:///./src/data/actions/posts.js","webpack:///./src/containers/CommentSearchPage/index.jsx","webpack:///./src/components/CommentSearch/index.jsx","webpack:///./src/components/CommentDetails/index.jsx","webpack:///./src/data/actions/comment.js","webpack:///./src/containers/DisclosurePage/index.jsx","webpack:///./src/data/store.js","webpack:///./src/data/reducers/index.js","webpack:///./src/data/reducers/posts.js","webpack:///./src/data/reducers/comment.js"],"names":["STARTED_FETCHING_POSTS","GET_POSTS","FINISHED_FETCHING_POSTS","STARTED_FETCHING_COMMENT","FINISHED_FETCHING_COMMENT","ERROR_FETCHING_COMMENT","GET_COMMENT","__webpack_require__","_reactRouterDom","_reactRedux","_reactDom2","default","render","_react2","createElement","Provider","store","_store2","BrowserRouter","className","Link","to","Switch","Route","exact","path","component","_PostsPage2","_DisclosurePage2","_CommentSearchPage2","document","getElementById","_ToggleablePosts","_posts","PostsPage","connect","state","posts","dispatch","getPosts","fetchPosts","_ToggleablePosts2","_paragon","PostItem","_ref","title","body","PostsList","_ref2","slice","map","post","key","id","ToggleablePosts","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","handleCheck","bind","checked","Component","setState","CheckBox","name","label","onChange","defaultProps","propTypes","_propTypes2","string","arrayOf","object","func","startedFetchingPosts","type","finishedFetchingPosts","fetch","then","response","json","data","_CommentSearch","_comment","CommentSearchPage","commentDetails","comment","details","errorFetching","getComment","commentId","fetchComment","_CommentSearch2","_react","CommentSearch","handleSubmit","handleInputChange","StatusAlert","open","dialog","onClose","InputText","value","description","Button","onClick","_CommentDetails2","postId","email","shape","number","bool","CommentDetails","startedFetchingComment","finishedFetchingComment","errorFetchingComment","ok","Error","catch","_redux","_logOnlyInProduction","_reduxLogger","loggerMiddleware","createLogger","createStore","_reducers2","composeWithDevTools","applyMiddleware","_reduxThunk2","rootReducer","combineReducers","arguments","length","undefined","startedFetching","finishedFetching","action","_extends","initialState"],"mappings":"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","file":"app.5f8577b2c4c448c0ba29.js","sourcesContent":["const STARTED_FETCHING_POSTS = 'STARTED_FETCHING_POSTS';\nconst GET_POSTS = 'GET_POSTS';\nconst FINISHED_FETCHING_POSTS = 'FINISHED_FETCHING_POSTS';\n\nexport {\n  STARTED_FETCHING_POSTS,\n  GET_POSTS,\n  FINISHED_FETCHING_POSTS,\n};\n","const STARTED_FETCHING_COMMENT = 'STARTED_FETCHING_COMMENT';\nconst FINISHED_FETCHING_COMMENT = 'FINISHED_FETCHING_COMMENT';\nconst ERROR_FETCHING_COMMENT = 'ERROR_FETCHING_COMMENT';\nconst GET_COMMENT = 'GET_COMMENT';\n\nexport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n};\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport PostsPage from './containers/PostsPage';\nimport CommentSearchPage from './containers/CommentSearchPage';\nimport DisclosurePage from './containers/DisclosurePage';\nimport store from './data/store';\nimport './App.scss';\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <div>\n        <header>\n          <nav>\n            <ul className=\"nav\">\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/\">Home</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/posts\">Posts</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/disclosure\">Disclosure</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/comment-search\">Comment Search</Link></li>\n            </ul>\n          </nav>\n        </header>\n        <main>\n          <Switch>\n            <Route exact path=\"/\" component={() => <span>Hello World</span>} />\n            <Route path=\"/posts\" component={PostsPage} />\n            <Route path=\"/disclosure\" component={DisclosurePage} />\n            <Route path=\"/comment-search\" component={CommentSearchPage} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { connect } from 'react-redux';\n\nimport ToggleablePosts from '../../components/ToggleablePosts';\nimport { fetchPosts } from '../../data/actions/posts';\n\nconst mapStateToProps = state => (\n  {\n    posts: state.posts.posts,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getPosts: () => dispatch(fetchPosts()),\n  }\n);\n\nconst PostsPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ToggleablePosts);\n\nexport default PostsPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckBox } from '@edx/paragon';\n\nconst PostItem = ({ title, body }) => (\n  <div className=\"post\">\n    <h3>{title}</h3>\n    <span>{body}</span>\n  </div>\n);\n\nconst PostsList = ({ posts }) => (\n  <ul>\n    {\n      posts\n        .slice(0, 10)\n        .map(post => (\n          <li key={post.id}>\n            <PostItem title={post.title} body={post.body} />\n          </li>\n        ))\n    }\n  </ul>\n);\n\nclass ToggleablePosts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = this.handleCheck.bind(this);\n\n    this.state = {\n      checked: false,\n    };\n  }\n\n  handleCheck() {\n    this.setState({ checked: !this.state.checked });\n    this.props.getPosts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Posts</h1>\n        <div>\n          <CheckBox\n            name=\"activate-posts\"\n            label=\"See Posts\"\n            checked={this.state.checked}\n            onChange={this.handleCheck}\n          />\n        </div>\n        <div>\n          {\n            this.state.checked\n            && <PostsList posts={this.props.posts} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nPostItem.defaultProps = {\n  title: '',\n  body: '',\n};\n\nPostItem.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n};\n\nToggleablePosts.defaultProps = {\n  posts: [],\n  getPosts: () => {},\n};\n\nToggleablePosts.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  getPosts: PropTypes.func,\n};\n\nexport default ToggleablePosts;\n","import 'whatwg-fetch';\n\nimport {\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n  GET_POSTS,\n} from '../constants/actionTypes/posts';\n\nconst startedFetchingPosts = () => (\n  {\n    type: STARTED_FETCHING_POSTS,\n  }\n);\n\nconst finishedFetchingPosts = () => (\n  {\n    type: FINISHED_FETCHING_POSTS,\n  }\n);\n\nconst getPosts = posts => (\n  {\n    type: GET_POSTS,\n    posts,\n  }\n);\n\nconst fetchPosts = () => (\n  (dispatch) => {\n    dispatch(startedFetchingPosts());\n    return fetch('https://jsonplaceholder.typicode.com/posts')\n      // TODO: handle response error\n      .then(response => response.json())\n      .then((data) => {\n        dispatch(getPosts(data));\n        dispatch(finishedFetchingPosts());\n      });\n  }\n);\n\nexport {\n  startedFetchingPosts,\n  finishedFetchingPosts,\n  getPosts,\n  fetchPosts,\n};\n","import { connect } from 'react-redux';\n\nimport CommentSearch from '../../components/CommentSearch';\nimport { fetchComment } from '../../data/actions/comment';\n\nconst mapStateToProps = state => (\n  {\n    commentDetails: state.comment.details,\n    errorFetching: state.comment.errorFetching,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getComment: commentId => dispatch(fetchComment(commentId)),\n  }\n);\n\nconst CommentSearchPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommentSearch);\n\nexport default CommentSearchPage;\n","import React, { Component } from 'react';\nimport { InputText, Button, StatusAlert } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nimport CommentDetails from '../CommentDetails';\n\nclass CommentSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n    this.state = { commentId: '' };\n  }\n\n  handleSubmit() {\n    this.props.getComment(this.state.commentId);\n  }\n\n  handleInputChange(commentId) {\n    this.setState({ commentId });\n  }\n\n  render() {\n    return (\n      <div>\n        <StatusAlert\n          open={this.props.errorFetching}\n          dialog=\"Invalid Comment ID\"\n          onClose={() => {}}\n        />\n        <InputText\n          name=\"comment-id-input\"\n          label=\"Input a Comment ID\"\n          value=\"\"\n          description=\"Comment ID to search by\"\n          onChange={this.handleInputChange}\n        />\n        <Button label=\"Search for Comment By ID\" onClick={this.handleSubmit} />\n        {\n          this.props.commentDetails\n          && !this.props.errorFetching\n          && <CommentDetails {...this.props.commentDetails} />\n        }\n      </div>\n    );\n  }\n}\n\nCommentSearch.defaultProps = {\n  commentDetails: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  getComment: () => {},\n  errorFetching: false,\n};\n\nCommentSearch.propTypes = {\n  commentDetails: PropTypes.shape({\n    id: PropTypes.number,\n    postId: PropTypes.number,\n    name: PropTypes.string,\n    email: emailPropType,\n    body: PropTypes.string,\n  }),\n  getComment: PropTypes.func,\n  errorFetching: PropTypes.bool,\n};\n\nexport default CommentSearch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nconst CommentDetails = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => (\n  <ul>\n    <li>ID: {id}</li>\n    <li>Post ID: {postId}</li>\n    <li>Name: {name}</li>\n    <li>Email Address: {email}</li>\n    <li>Body: {body}</li>\n  </ul>\n);\n\nCommentDetails.defaultProps = {\n  id: null,\n  postId: null,\n  name: '',\n  email: 'example@example.com',\n  body: '',\n};\n\nCommentDetails.propTypes = {\n  id: PropTypes.number,\n  postId: PropTypes.number,\n  name: PropTypes.string,\n  email: emailPropType,\n  body: PropTypes.string,\n};\n\nexport default CommentDetails;\n","import 'whatwg-fetch';\nimport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst startedFetchingComment = () => ({ type: STARTED_FETCHING_COMMENT });\nconst finishedFetchingComment = () => ({ type: FINISHED_FETCHING_COMMENT });\nconst errorFetchingComment = () => ({ type: ERROR_FETCHING_COMMENT });\nconst getComment = comment => ({ type: GET_COMMENT, comment });\nconst fetchComment = commentId => (\n  (dispatch) => {\n    dispatch(startedFetchingComment());\n    return fetch(`https://jsonplaceholder.typicode.com/comments/${commentId}`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error();\n      })\n      .then((data) => {\n        dispatch(getComment(data));\n        dispatch(finishedFetchingComment());\n      })\n      .catch(() => dispatch(errorFetchingComment()));\n  }\n);\n\nexport {\n  startedFetchingComment,\n  finishedFetchingComment,\n  errorFetchingComment,\n  getComment,\n  fetchComment,\n};\n","import React from 'react';\n\nconst DisclosurePage = () => (\n  <div>\n    <h1 className=\"alert alert-primary\">Some Disclosure Page</h1>\n    <p>Blahblahblahblahblahblah</p>\n    <ul>\n      <li>Agree to this</li>\n      <li>Agree to this</li>\n      <li>Also agree to this</li>\n    </ul>\n  </div>\n);\n\nexport default DisclosurePage;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport { createLogger } from 'redux-logger';\n\nimport reducers from './reducers';\n\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunkMiddleware, loggerMiddleware)),\n);\n\nexport default store;\n","import { combineReducers } from 'redux';\n\nimport posts from './posts';\nimport comment from './comment';\n\nconst rootReducer = combineReducers({\n  posts,\n  comment,\n});\n\nexport default rootReducer;\n","import {\n  GET_POSTS,\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n} from '../constants/actionTypes/posts';\n\nconst posts = (state = { posts: [], startedFetching: false, finishedFetching: false }, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case STARTED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case FINISHED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: false,\n        finishedFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n","import {\n  STARTED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst initialState = {\n  details: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  startedFetching: false,\n  finishedFetching: false,\n  errorFetching: false,\n};\n\nconst comment = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COMMENT:\n      return {\n        ...state,\n        details: { ...action.comment },\n        finishedFetching: true,\n        errorFetching: false,\n      };\n    case STARTED_FETCHING_COMMENT:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case ERROR_FETCHING_COMMENT:\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default comment;\n"],"sourceRoot":""}