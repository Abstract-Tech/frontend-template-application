{"version":3,"sources":["webpack:///./src/data/constants/actionTypes/posts.js","webpack:///./src/data/constants/actionTypes/comment.js","webpack:///./src/data/history.js","webpack:///./src/index.jsx","webpack:///./src/containers/PostsPage/index.jsx","webpack:///./src/components/ToggleablePosts/index.jsx","webpack:///./src/data/actions/posts.js","webpack:///./src/containers/CommentSearchPage/index.jsx","webpack:///./src/components/CommentSearch/index.jsx","webpack:///./src/components/CommentDetails/index.jsx","webpack:///./src/data/actions/comment.js","webpack:///./src/containers/DisclosurePage/index.jsx","webpack:///./src/data/store.js","webpack:///./src/data/reducers/index.js","webpack:///./src/data/reducers/posts.js","webpack:///./src/data/reducers/comment.js"],"names":["STARTED_FETCHING_POSTS","GET_POSTS","FINISHED_FETCHING_POSTS","STARTED_FETCHING_COMMENT","FINISHED_FETCHING_COMMENT","ERROR_FETCHING_COMMENT","GET_COMMENT","history","__webpack_require__","createBrowserHistory","_reactRedux","_reactRouter","_reactRouterDom","_connectedReactRouter","_reactDom2","default","render","_react2","createElement","Provider","store","_store2","ConnectedRouter","_history2","className","Link","to","Switch","Route","exact","path","component","_PostsPage2","_DisclosurePage2","_CommentSearchPage2","document","getElementById","_ToggleablePosts","_posts","PostsPage","connect","state","posts","dispatch","getPosts","fetchPosts","_ToggleablePosts2","_paragon","PostItem","_ref","title","body","PostsList","_ref2","slice","map","post","key","id","ToggleablePosts","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","handleCheck","bind","checked","Component","setState","CheckBox","name","label","onChange","defaultProps","propTypes","_propTypes2","string","arrayOf","object","func","_axios","startedFetchingPosts","type","finishedFetchingPosts","_axios2","get","then","result","data","_CommentSearch","_comment","CommentSearchPage","commentDetails","comment","details","errorFetching","getComment","commentId","fetchComment","_CommentSearch2","_react","CommentSearch","handleSubmit","handleInputChange","StatusAlert","open","dialog","onClose","InputText","value","description","Button","onClick","_CommentDetails2","postId","email","shape","number","bool","CommentDetails","startedFetchingComment","finishedFetchingComment","errorFetchingComment","catch","_redux","_reduxLogger","_logOnlyInProduction","loggerMiddleware","createLogger","createStore","_reducers2","composeWithDevTools","applyMiddleware","routerMiddleware","_reduxThunk2","combineReducers","router","connectRouter","arguments","length","undefined","startedFetching","finishedFetching","action","_extends","initialState"],"mappings":"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","file":"app.3109dee04ca0e32a9c79.js","sourcesContent":["const STARTED_FETCHING_POSTS = 'STARTED_FETCHING_POSTS';\nconst GET_POSTS = 'GET_POSTS';\nconst FINISHED_FETCHING_POSTS = 'FINISHED_FETCHING_POSTS';\n\nexport {\n  STARTED_FETCHING_POSTS,\n  GET_POSTS,\n  FINISHED_FETCHING_POSTS,\n};\n","const STARTED_FETCHING_COMMENT = 'STARTED_FETCHING_COMMENT';\nconst FINISHED_FETCHING_COMMENT = 'FINISHED_FETCHING_COMMENT';\nconst ERROR_FETCHING_COMMENT = 'ERROR_FETCHING_COMMENT';\nconst GET_COMMENT = 'GET_COMMENT';\n\nexport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n};\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport PostsPage from './containers/PostsPage';\nimport CommentSearchPage from './containers/CommentSearchPage';\nimport DisclosurePage from './containers/DisclosurePage';\nimport history from './data/history';\nimport store from './data/store';\n\nimport './App.scss';\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <div>\n        <header>\n          <nav>\n            <ul className=\"nav\">\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/\">Home</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/posts\">Posts</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/disclosure\">Disclosure</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/comment-search\">Comment Search</Link></li>\n            </ul>\n          </nav>\n        </header>\n        <main>\n          <Switch>\n            <Route exact path=\"/\" component={() => <span>Hello World</span>} />\n            <Route path=\"/posts\" component={PostsPage} />\n            <Route path=\"/disclosure\" component={DisclosurePage} />\n            <Route path=\"/comment-search\" component={CommentSearchPage} />\n          </Switch>\n        </main>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { connect } from 'react-redux';\n\nimport ToggleablePosts from '../../components/ToggleablePosts';\nimport { fetchPosts } from '../../data/actions/posts';\n\nconst mapStateToProps = state => (\n  {\n    posts: state.posts.posts,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getPosts: () => dispatch(fetchPosts()),\n  }\n);\n\nconst PostsPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ToggleablePosts);\n\nexport default PostsPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckBox } from '@edx/paragon';\n\nconst PostItem = ({ title, body }) => (\n  <div className=\"post\">\n    <h3>{title}</h3>\n    <span>{body}</span>\n  </div>\n);\n\nconst PostsList = ({ posts }) => (\n  <ul>\n    {\n      posts\n        .slice(0, 10)\n        .map(post => (\n          <li key={post.id}>\n            <PostItem title={post.title} body={post.body} />\n          </li>\n        ))\n    }\n  </ul>\n);\n\nclass ToggleablePosts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = this.handleCheck.bind(this);\n\n    this.state = {\n      checked: false,\n    };\n  }\n\n  handleCheck() {\n    this.setState({ checked: !this.state.checked });\n    this.props.getPosts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Posts</h1>\n        <div>\n          <CheckBox\n            name=\"activate-posts\"\n            label=\"See Posts\"\n            checked={this.state.checked}\n            onChange={this.handleCheck}\n          />\n        </div>\n        <div>\n          {\n            this.state.checked\n            && <PostsList posts={this.props.posts} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nPostItem.defaultProps = {\n  title: '',\n  body: '',\n};\n\nPostItem.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n};\n\nToggleablePosts.defaultProps = {\n  posts: [],\n  getPosts: () => {},\n};\n\nToggleablePosts.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  getPosts: PropTypes.func,\n};\n\nexport default ToggleablePosts;\n","import axios from 'axios';\n\nimport {\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n  GET_POSTS,\n} from '../constants/actionTypes/posts';\n\nconst startedFetchingPosts = () => (\n  {\n    type: STARTED_FETCHING_POSTS,\n  }\n);\n\nconst finishedFetchingPosts = () => (\n  {\n    type: FINISHED_FETCHING_POSTS,\n  }\n);\n\nconst getPosts = posts => (\n  {\n    type: GET_POSTS,\n    posts,\n  }\n);\n\nconst fetchPosts = () => (\n  (dispatch) => {\n    dispatch(startedFetchingPosts());\n    return axios.get('https://jsonplaceholder.typicode.com/posts')\n      // TODO: handle response error\n      .then((result) => {\n        dispatch(getPosts(result.data));\n        dispatch(finishedFetchingPosts());\n      });\n  }\n);\n\nexport {\n  startedFetchingPosts,\n  finishedFetchingPosts,\n  getPosts,\n  fetchPosts,\n};\n","import { connect } from 'react-redux';\n\nimport CommentSearch from '../../components/CommentSearch';\nimport { fetchComment } from '../../data/actions/comment';\n\nconst mapStateToProps = state => (\n  {\n    commentDetails: state.comment.details,\n    errorFetching: state.comment.errorFetching,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getComment: commentId => dispatch(fetchComment(commentId)),\n  }\n);\n\nconst CommentSearchPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommentSearch);\n\nexport default CommentSearchPage;\n","import React, { Component } from 'react';\nimport { InputText, Button, StatusAlert } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nimport CommentDetails from '../CommentDetails';\n\nclass CommentSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n    this.state = { commentId: '' };\n  }\n\n  handleSubmit() {\n    this.props.getComment(this.state.commentId);\n  }\n\n  handleInputChange(commentId) {\n    this.setState({ commentId });\n  }\n\n  render() {\n    return (\n      <div>\n        <StatusAlert\n          open={this.props.errorFetching}\n          dialog=\"Invalid Comment ID\"\n          onClose={() => {}}\n        />\n        <InputText\n          name=\"comment-id-input\"\n          label=\"Input a Comment ID\"\n          value=\"\"\n          description=\"Comment ID to search by\"\n          onChange={this.handleInputChange}\n        />\n        <Button label=\"Search for Comment By ID\" onClick={this.handleSubmit} />\n        {\n          this.props.commentDetails\n          && !this.props.errorFetching\n          && <CommentDetails {...this.props.commentDetails} />\n        }\n      </div>\n    );\n  }\n}\n\nCommentSearch.defaultProps = {\n  commentDetails: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  getComment: () => {},\n  errorFetching: false,\n};\n\nCommentSearch.propTypes = {\n  commentDetails: PropTypes.shape({\n    id: PropTypes.number,\n    postId: PropTypes.number,\n    name: PropTypes.string,\n    email: emailPropType,\n    body: PropTypes.string,\n  }),\n  getComment: PropTypes.func,\n  errorFetching: PropTypes.bool,\n};\n\nexport default CommentSearch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nconst CommentDetails = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => (\n  <ul>\n    <li>ID: {id}</li>\n    <li>Post ID: {postId}</li>\n    <li>Name: {name}</li>\n    <li>Email Address: {email}</li>\n    <li>Body: {body}</li>\n  </ul>\n);\n\nCommentDetails.defaultProps = {\n  id: null,\n  postId: null,\n  name: '',\n  email: 'example@example.com',\n  body: '',\n};\n\nCommentDetails.propTypes = {\n  id: PropTypes.number,\n  postId: PropTypes.number,\n  name: PropTypes.string,\n  email: emailPropType,\n  body: PropTypes.string,\n};\n\nexport default CommentDetails;\n","import axios from 'axios';\n\nimport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst startedFetchingComment = () => ({ type: STARTED_FETCHING_COMMENT });\nconst finishedFetchingComment = () => ({ type: FINISHED_FETCHING_COMMENT });\nconst errorFetchingComment = () => ({ type: ERROR_FETCHING_COMMENT });\nconst getComment = comment => ({ type: GET_COMMENT, comment });\nconst fetchComment = commentId => (\n  (dispatch) => {\n    dispatch(startedFetchingComment());\n    return axios.get(`https://jsonplaceholder.typicode.com/comments/${commentId}`)\n      .then((result) => {\n        dispatch(getComment(result.data));\n        dispatch(finishedFetchingComment());\n      })\n      .catch(() => dispatch(errorFetchingComment()));\n  }\n);\n\nexport {\n  startedFetchingComment,\n  finishedFetchingComment,\n  errorFetchingComment,\n  getComment,\n  fetchComment,\n};\n","import React from 'react';\n\nconst DisclosurePage = () => (\n  <div>\n    <h1 className=\"alert alert-primary\">Some Disclosure Page</h1>\n    <p>Blahblahblahblahblahblah</p>\n    <ul>\n      <li>Agree to this</li>\n      <li>Agree to this</li>\n      <li>Also agree to this</li>\n    </ul>\n  </div>\n);\n\nexport default DisclosurePage;\n","import { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\n\nimport history from './history';\nimport createRootReducer from './reducers';\n\nconst loggerMiddleware = createLogger();\nconst store = createStore(\n  createRootReducer(history),\n  composeWithDevTools(applyMiddleware(\n    routerMiddleware(history), // for dispatching history actions\n    thunkMiddleware,\n    loggerMiddleware,\n  )),\n);\n\nexport default store;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport posts from './posts';\nimport comment from './comment';\n\nexport default history => combineReducers({\n  router: connectRouter(history),\n  posts,\n  comment,\n});\n","import {\n  GET_POSTS,\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n} from '../constants/actionTypes/posts';\n\nconst posts = (state = { posts: [], startedFetching: false, finishedFetching: false }, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case STARTED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case FINISHED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: false,\n        finishedFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n","import {\n  STARTED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst initialState = {\n  details: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  startedFetching: false,\n  finishedFetching: false,\n  errorFetching: false,\n};\n\nconst comment = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COMMENT:\n      return {\n        ...state,\n        details: { ...action.comment },\n        finishedFetching: true,\n        errorFetching: false,\n      };\n    case STARTED_FETCHING_COMMENT:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case ERROR_FETCHING_COMMENT:\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default comment;\n"],"sourceRoot":""}