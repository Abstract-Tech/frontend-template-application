{"version":3,"sources":["webpack:///./src/data/constants/actionTypes/comment.js","webpack:///./src/data/constants/ActionType.js","webpack:///./src/data/reducers/comment.js","webpack:///./src/data/reducers/posts.js","webpack:///./src/data/reducers/index.js","webpack:///./src/data/store.js","webpack:///./src/components/DisclosurePage/index.jsx","webpack:///./src/data/actions/comment.js","webpack:///./src/components/CommentDetails/index.jsx","webpack:///./src/components/CommentSearch/index.jsx","webpack:///./src/containers/CommentSearchPage/index.jsx","webpack:///./src/data/actions/index.js","webpack:///./src/components/PostsPage/index.jsx","webpack:///./src/containers/CurrentPostsPage.jsx","webpack:///./src/index.jsx"],"names":["STARTED_FETCHING_COMMENT","FINISHED_FETCHING_COMMENT","ERROR_FETCHING_COMMENT","GET_COMMENT","STARTED_FETCHING_POSTS","GET_POSTS","FINISHED_FETCHING_POSTS","_comment","__webpack_require__","initialState","details","id","postId","name","email","body","startedFetching","finishedFetching","errorFetching","state","arguments","length","undefined","action","type","_extends","comment","_ActionType","posts","_redux","rootReducer","combineReducers","_logOnlyInProduction","_reduxLogger","loggerMiddleware","createLogger","store","createStore","_reducers2","default","composeWithDevTools","applyMiddleware","_reduxThunk2","_react","_react2","createElement","className","startedFetchingComment","finishedFetchingComment","errorFetchingComment","getComment","fetchComment","commentId","dispatch","fetch","then","response","ok","json","Error","data","catch","CommentDetails","_ref","defaultProps","propTypes","_propTypes2","number","string","_paragon","CommentSearch","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","handleSubmit","bind","handleInputChange","setState","StatusAlert","open","dialog","onClose","InputText","label","value","description","onChange","Button","onClick","commentDetails","_CommentDetails2","shape","func","bool","_reactRedux","_CommentSearch","CommentSearchPage","connect","_CommentSearch2","startedFetchingPosts","finishedFetchingPosts","getPosts","fetchPosts","PostItem","title","PostsList","_ref2","slice","map","post","key","PostsPage","handleCheck","checked","Component","CheckBox","arrayOf","object","_PostsPage","_actions","CurrentPostsPage","_PostsPage2","_reactRouterDom","_reactDom2","render","Provider","_store2","BrowserRouter","Link","to","Switch","Route","exact","path","component","_CurrentPostsPage2","_DisclosurePage2","_CommentSearchPage2","document","getElementById"],"mappings":"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","file":"app.min.js","sourcesContent":["const STARTED_FETCHING_COMMENT = 'STARTED_FETCHING_COMMENT';\nconst FINISHED_FETCHING_COMMENT = 'FINISHED_FETCHING_COMMENT';\nconst ERROR_FETCHING_COMMENT = 'ERROR_FETCHING_COMMENT';\nconst GET_COMMENT = 'GET_COMMENT';\n\nexport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n};\n","const STARTED_FETCHING_POSTS = 'STARTED_FETCHING_POSTS';\nconst GET_POSTS = 'GET_POSTS';\nconst FINISHED_FETCHING_POSTS = 'FINISHED_FETCHING_POSTS';\n\nexport {\n  STARTED_FETCHING_POSTS,\n  GET_POSTS,\n  FINISHED_FETCHING_POSTS,\n};\n","import {\n  STARTED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst initialState = {\n  details: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  startedFetching: false,\n  finishedFetching: false,\n  errorFetching: false,\n};\n\nconst comment = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COMMENT:\n      return {\n        ...state,\n        details: { ...action.comment },\n        finishedFetching: true,\n        errorFetching: false,\n      };\n    case STARTED_FETCHING_COMMENT:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case ERROR_FETCHING_COMMENT:\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default comment;\n","import {\n  GET_POSTS,\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n} from '../constants/ActionType';\n\nconst posts = (state = { posts: [], startedFetching: false, finishedFetching: false }, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case STARTED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case FINISHED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: false,\n        finishedFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n","import { combineReducers } from 'redux';\n\nimport posts from './posts';\nimport comment from './comment';\n\nconst rootReducer = combineReducers({\n  posts,\n  comment,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport { createLogger } from 'redux-logger';\n\nimport reducers from './reducers';\n\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunkMiddleware, loggerMiddleware)),\n);\n\nexport default store;\n","import React from 'react';\n\nconst DisclosurePage = () => (\n  <div>\n    <h1 className=\"alert alert-primary\">Some Disclosure Page</h1>\n    <p>Blahblahblahblahblahblah</p>\n    <ul>\n      <li>Agree to this</li>\n      <li>Agree to this</li>\n      <li>Also agree to this</li>\n    </ul>\n  </div>\n);\n\nexport default DisclosurePage;\n","import 'whatwg-fetch';\nimport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst startedFetchingComment = () => ({ type: STARTED_FETCHING_COMMENT });\nconst finishedFetchingComment = () => ({ type: FINISHED_FETCHING_COMMENT });\nconst errorFetchingComment = () => ({ type: ERROR_FETCHING_COMMENT });\nconst getComment = comment => ({ type: GET_COMMENT, comment });\nconst fetchComment = commentId => (\n  (dispatch) => {\n    dispatch(startedFetchingComment());\n    return fetch(`https://jsonplaceholder.typicode.com/comments/${commentId}`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error();\n      })\n      .then((data) => {\n        dispatch(getComment(data));\n        dispatch(finishedFetchingComment());\n      })\n      .catch(() => dispatch(errorFetchingComment()));\n  }\n);\n\nexport {\n  startedFetchingComment,\n  finishedFetchingComment,\n  errorFetchingComment,\n  getComment,\n  fetchComment,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nconst CommentDetails = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => (\n  <ul>\n    <li>ID: {id}</li>\n    <li>Post ID: {postId}</li>\n    <li>Name: {name}</li>\n    <li>Email Address: {email}</li>\n    <li>Body: {body}</li>\n  </ul>\n);\n\nCommentDetails.defaultProps = {\n  id: null,\n  postId: null,\n  name: '',\n  email: 'example@example.com',\n  body: '',\n};\n\nCommentDetails.propTypes = {\n  id: PropTypes.number,\n  postId: PropTypes.number,\n  name: PropTypes.string,\n  email: emailPropType,\n  body: PropTypes.string,\n};\n\nexport default CommentDetails;\n","import React, { Component } from 'react';\nimport { InputText, Button, StatusAlert } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nimport CommentDetails from '../CommentDetails';\n\nclass CommentSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n    this.state = { commentId: '' };\n  }\n\n  handleSubmit() {\n    this.props.getComment(this.state.commentId);\n  }\n\n  handleInputChange(commentId) {\n    this.setState({ commentId });\n  }\n\n  render() {\n    return (\n      <div>\n        <StatusAlert\n          open={this.props.errorFetching}\n          dialog=\"Invalid Comment ID\"\n          onClose={() => {}}\n        />\n        <InputText\n          name=\"comment-id-input\"\n          label=\"Input a Comment ID\"\n          value=\"\"\n          description=\"Comment ID to search by\"\n          onChange={this.handleInputChange}\n        />\n        <Button label=\"Search for Comment By ID\" onClick={this.handleSubmit} />\n        {\n          this.props.commentDetails\n          && !this.props.errorFetching\n          && <CommentDetails {...this.props.commentDetails} />\n        }\n      </div>\n    );\n  }\n}\n\nCommentSearch.defaultProps = {\n  commentDetails: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  getComment: () => {},\n  errorFetching: false,\n};\n\nCommentSearch.propTypes = {\n  commentDetails: PropTypes.shape({\n    id: PropTypes.number,\n    postId: PropTypes.number,\n    name: PropTypes.string,\n    email: emailPropType,\n    body: PropTypes.string,\n  }),\n  getComment: PropTypes.func,\n  errorFetching: PropTypes.bool,\n};\n\nexport default CommentSearch;\n","import { connect } from 'react-redux';\n\nimport CommentSearch from '../../components/CommentSearch';\nimport { fetchComment } from '../../data/actions/comment';\n\nconst mapStateToProps = state => (\n  {\n    commentDetails: state.comment.details,\n    errorFetching: state.comment.errorFetching,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getComment: commentId => dispatch(fetchComment(commentId)),\n  }\n);\n\nconst CommentSearchPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommentSearch);\n\nexport default CommentSearchPage;\n","import 'whatwg-fetch';\n\nimport {\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n  GET_POSTS,\n} from '../constants/ActionType';\n\nconst startedFetchingPosts = () => (\n  {\n    type: STARTED_FETCHING_POSTS,\n  }\n);\n\nconst finishedFetchingPosts = () => (\n  {\n    type: FINISHED_FETCHING_POSTS,\n  }\n);\n\nconst getPosts = posts => (\n  {\n    type: GET_POSTS,\n    posts,\n  }\n);\n\nconst fetchPosts = () => (\n  (dispatch) => {\n    dispatch(startedFetchingPosts());\n    return fetch('https://jsonplaceholder.typicode.com/posts')\n      // TODO: handle response error\n      .then(response => response.json())\n      .then((data) => {\n        dispatch(getPosts(data));\n        dispatch(finishedFetchingPosts());\n      });\n  }\n);\n\nexport {\n  startedFetchingPosts,\n  finishedFetchingPosts,\n  getPosts,\n  fetchPosts,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckBox } from '@edx/paragon';\n\nconst PostItem = ({ title, body }) => (\n  <div className=\"post\">\n    <h3>{title}</h3>\n    <span>{body}</span>\n  </div>\n);\n\nconst PostsList = ({ posts }) => (\n  <ul>\n    {\n      posts\n        .slice(0, 10)\n        .map(post => (\n          <li key={post.id}>\n            <PostItem title={post.title} body={post.body} />\n          </li>\n        ))\n    }\n  </ul>\n);\n\nclass PostsPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = this.handleCheck.bind(this);\n\n    this.state = {\n      checked: false,\n    };\n  }\n\n  handleCheck() {\n    this.setState({ checked: !this.state.checked });\n    this.props.getPosts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Posts</h1>\n        <div>\n          <CheckBox\n            name=\"activate-posts\"\n            label=\"See Posts\"\n            checked={this.state.checked}\n            onChange={this.handleCheck}\n          />\n        </div>\n        <div>\n          {\n            this.state.checked\n            && <PostsList posts={this.props.posts} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nPostItem.defaultProps = {\n  title: '',\n  body: '',\n};\n\nPostItem.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n};\n\nPostsPage.defaultProps = {\n  posts: [],\n  getPosts: () => {},\n};\n\nPostsPage.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  getPosts: PropTypes.func,\n};\n\nexport default PostsPage;\n","import { connect } from 'react-redux';\nimport PostsPage from '../components/PostsPage';\nimport { fetchPosts } from '../data/actions';\n\nconst mapStateToProps = state => (\n  {\n    posts: state.posts.posts,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getPosts: () => dispatch(fetchPosts()),\n  }\n);\n\nconst CurrentPostsPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostsPage);\n\nexport default CurrentPostsPage;\n","import 'babel-polyfill'; // general ES2015 polyfill (e.g. promise)\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport CurrentPostsPage from './containers/CurrentPostsPage';\nimport CommentSearchPage from './containers/CommentSearchPage';\nimport DisclosurePage from './components/DisclosurePage';\nimport store from './data/store';\nimport './App.scss';\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <div>\n        <header>\n          <nav>\n            <ul className=\"nav\">\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/\">Home</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/posts\">Posts</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/disclosure\">Disclosure</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/comment-search\">Comment Search</Link></li>\n            </ul>\n          </nav>\n        </header>\n        <main>\n          <Switch>\n            <Route exact path=\"/\" component={() => <span>Hello World</span>} />\n            <Route path=\"/posts\" component={CurrentPostsPage} />\n            <Route path=\"/disclosure\" component={DisclosurePage} />\n            <Route path=\"/comment-search\" component={CommentSearchPage} />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}